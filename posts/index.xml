<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on roper的博客</title>
    <link>https://roperluo32.github.io/posts/</link>
    <description>Recent content in Posts on roper的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Feb 2020 13:39:08 +0800</lastBuildDate>
    
	<atom:link href="https://roperluo32.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《敏捷编程》读书笔记</title>
      <link>https://roperluo32.github.io/posts/%E6%95%8F%E6%8D%B7%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 09 Feb 2020 13:39:08 +0800</pubDate>
      
      <guid>https://roperluo32.github.io/posts/%E6%95%8F%E6%8D%B7%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>第一部分 敏捷开发   敏捷软件开发宣言
 个体和交互 胜过 过程和工具 可以工作的软件 胜过 面面俱到的文档 客户合作 胜过 合同谈判 响应变化 胜过 遵循计划    12 条原则
 我们最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意 即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势 经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好 在整个项目开发期间，业务人员和开发人员必须天天都在一起工作 围绕被激励起来的个人来构建项目。给他们提供所需要的环境和支持，并且信任他们能够完成工作 在团队内部，最具有效果并且富有效率的传递信息的方法，就是面对面的交谈 工作的软件是首要的进度度量标准 敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度 不断地关注优秀的技能和好的设计会增强敏捷能力 简单~未完成的工作最大化的艺术—一是根本的 最好的构架、需求和设计出自于自组织的团队 每隔一定时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行 调整    我的几条心得
 采用TDD测试驱动开发，先写单元测试，再写代码。足够的测试是项目成功的保证 确保类的单一职责原则，保证类和函数的简单 找出经常变化的部分，用抽象来隔离变化 先在业务领域讲故事（写代码），保证业务模型的清晰，可复用。通过依赖反转（DIP）来隔绝所有的其它无关逻辑（数据库，UI，协议等） 保持实现的简单，推迟数据库，协议，web框架的选型    极限编程的军规
 强调快速迭代（每两周一个迭代，2~3个月一个交付周期） TDD（单元测试+验收测试） 结对编程 最简单的设计，不提前引入不需要的东西 保持可持续的开发速度，不加班    TDD测试驱动开发的好处
 程序的正确性。显而易见的好处 可测试性。提前发现程序中的耦合并解耦，确保可测试性 不同的观察点。迫使从多个角度考虑即将实现的功能 文档。测试用例就是文档。    验收测试</description>
    </item>
    
    <item>
      <title>读书笔记2</title>
      <link>https://roperluo32.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Sun, 09 Feb 2020 10:00:08 +0800</pubDate>
      
      <guid>https://roperluo32.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02/</guid>
      <description>第二篇读书笔记 呵呵呵呵呵呵呵呵呵呵</description>
    </item>
    
    <item>
      <title>读书笔记</title>
      <link>https://roperluo32.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 09 Feb 2020 09:00:08 +0800</pubDate>
      
      <guid>https://roperluo32.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>这是我的第一篇读书笔记 blablablabla</description>
    </item>
    
    <item>
      <title>测试gitcomment插件</title>
      <link>https://roperluo32.github.io/posts/hugo-integrated-gitment-plugin/</link>
      <pubDate>Tue, 14 Jan 2020 14:46:11 +0800</pubDate>
      
      <guid>https://roperluo32.github.io/posts/hugo-integrated-gitment-plugin/</guid>
      <description>测试评论插件 这是一篇测试评论插件的文章 测试ok后记得要删掉</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://roperluo32.github.io/posts/my-first-post/</link>
      <pubDate>Tue, 14 Jan 2020 11:52:32 +0800</pubDate>
      
      <guid>https://roperluo32.github.io/posts/my-first-post/</guid>
      <description>第一章 整洁代码 童子军规则 让营地比你来时更干净
graph LR A --- B B--&amp;gt;C[fa:fa-ban forbidden] B--&amp;gt;D(fa:fa-spinner); &amp;lt;/div&amp;gt; 第二章 有意义的命名  选好名字要花时间 一旦发现更好的名字，就替换掉旧的 不好的变量名，无法一眼看出代码是要做什么 public List&amp;lt;int []&amp;gt; getThem () { List&amp;lt;int []&amp;gt; listl = new ArrayList&amp;lt;int []&amp;gt; (); for (int[] x : theList) if (x[OJ == 4) listl.add(x); return listl; } 用了好的变量名，代码的意图一目了然
public List&amp;lt;Cell&amp;gt; getFlaggedCells () { List&amp;lt;Cell&amp;gt; flaggedCells = new ArrayList&amp;lt;Cell&amp;gt; (); for (Cell cell : gameBoard) if (cell.is Flagged()) flaggedCells.add(cell); return flaggedCells; }   避免误导  不要用有特殊含义的词做变量。比如hp，List 不要使用l，o，1，0等  有意义的变量  不要用a1,a2 不要用asdjwke这种无意义的词，要用有意义的单词 名称长短和作用域大小相对应。作用域越大的变量，名称应该越长  不要加多余的变量前后缀（通过编辑器的高亮就能区分，人眼倾向于看有意义的部分，忽略这些多余的前后缀）  成员变量不要加m_，比如m_state 不要加类型String，比如phoneString 接口不要加I，比如IFactory  类和对象名使用名词，函数和方法使用动词 保持统一  比如fetch，get，retrieve都有获得的意思，统一用一个 再举一个例子controller，manager，driver  多使用程序猿领域语言  比如设计模式（Visitor，Observer等，程序猿一目了然） 比如数据结构（Queue，Stack，Hash等）  第三章 函数  短小，一个函数只做一件事情（无副作用） 函数内语句在同一抽象层级上 避免使用长switch。使用抽象进行隔离 参数控制在2个以下，最好1个。不要有flag参数！！ 分隔指令和询问  不要返回错误码，而要用异常 错误码列表对其它文件是一个巨大耦合，使用异常的派生避免了错误码列表     大师级程序员把系统当作故事来讲，而不是当作程序来写。他们使用选定编程语言提供 的工具构建一种更为丰富且更具表达力的语言，用来讲那个故事。那种领域特定语言的一个 部分，就是描述在系统中发生的各种行为的函数层级</description>
    </item>
    
  </channel>
</rss>